// Generated by: hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge.
// This file is part of the Phoenix CTMS project (www.phoenixctms.org),
// distributed under LGPL v2.1. Copyright (C) 2011 - 2017.
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package org.phoenixctms.ctsms.domain;

import java.util.Collection;

import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;
import org.phoenixctms.ctsms.enumeration.FileModule;
import org.phoenixctms.ctsms.enumeration.JobModule;
import org.phoenixctms.ctsms.query.CriteriaUtil;
import org.phoenixctms.ctsms.query.SubCriteriaMap;
import org.phoenixctms.ctsms.vo.CriteriaOutVO;
import org.phoenixctms.ctsms.vo.InputFieldOutVO;
import org.phoenixctms.ctsms.vo.JobFileVO;
import org.phoenixctms.ctsms.vo.JobInVO;
import org.phoenixctms.ctsms.vo.JobOutVO;
import org.phoenixctms.ctsms.vo.JobTypeVO;
import org.phoenixctms.ctsms.vo.MimeTypeVO;
import org.phoenixctms.ctsms.vo.PSFVO;
import org.phoenixctms.ctsms.vo.ProbandOutVO;
import org.phoenixctms.ctsms.vo.TrialOutVO;
import org.phoenixctms.ctsms.vo.UserOutVO;

/**
 * @see Job
 */
public class JobDaoImpl
		extends JobDaoBase {

	private static void applyModuleIdCriterions(org.hibernate.Criteria criteria, JobModule module, Long id) {
		if (module != null) {
			criteria.createCriteria("type").add(Restrictions.eq("module", module));
			//criteriaMap.createCriteria("category").add(Restrictions.eq("module", module));
			if (id != null) {
				switch (module) {
					case TRIAL_JOB:
						criteria.add(Restrictions.eq("trial.id", id.longValue()));
						break;
					case PROBAND_JOB:
						criteria.add(Restrictions.eq("proband.id", id.longValue()));
						break;
					case INPUT_FIELD_JOB:
						criteria.add(Restrictions.eq("inputField.id", id.longValue()));
						break;
					case INVENTORY_CRITERIA_JOB:
					case STAFF_CRITERIA_JOB:
					case COURSE_CRITERIA_JOB:
					case TRIAL_CRITERIA_JOB:
					case INPUT_FIELD_CRITERIA_JOB:
					case PROBAND_CRITERIA_JOB:
					case MASS_MAIL_JOB:
					case USER_CRITERIA_JOB:
						criteria.add(Restrictions.eq("inputField.id", id.longValue()));
						break;
					default:
				}
			}
		}
	}

	private org.hibernate.Criteria createJobCriteria() {
		org.hibernate.Criteria jobCriteria = this.getSession().createCriteria(Job.class);
		return jobCriteria;
	}

	@Override
	protected Collection<Job> handleFindJobs(
			JobModule module, Long id, Boolean active, PSFVO psf) throws Exception {
		org.hibernate.Criteria jobCriteria = createJobCriteria();
		SubCriteriaMap criteriaMap = new SubCriteriaMap(Job.class, jobCriteria);
		if (active != null) {
			jobCriteria.add(Restrictions.eq("active", active.booleanValue()));
		}
		applyModuleIdCriterions(jobCriteria, module, id);
		CriteriaUtil.applyPSFVO(criteriaMap, psf);
		return jobCriteria.list();
	}

	@Override
	protected long handleGetCount(
			JobModule module, Long id, Boolean active) throws Exception {
		org.hibernate.Criteria jobCriteria = createJobCriteria();
		if (active != null) {
			jobCriteria.add(Restrictions.eq("active", active.booleanValue()));
		}
		applyModuleIdCriterions(jobCriteria, module, id);
		return (Long) jobCriteria.setProjection(Projections.rowCount()).uniqueResult();
	}

	/**
	 * {@inheritDoc}
	 */
	public void toJobFileVO(
			Job source,
			JobFileVO target) {
		super.toJobFileVO(source, target);
		// WARNING! No conversion for target.modifiedUser (can't convert source.getModifiedUser():org.phoenixctms.ctsms.domain.User to org.phoenixctms.ctsms.vo.UserOutVO
		// WARNING! No conversion for target.contentType (can't convert source.getContentType():org.phoenixctms.ctsms.domain.MimeType to org.phoenixctms.ctsms.vo.MimeTypeVO
		MimeType contentType = source.getContentType();
		User modifiedUser = source.getModifiedUser();
		target.setHasFile(source.getFileSize() != null && source.getFileSize() > 0l);
		if (contentType != null) {
			target.setContentType(this.getMimeTypeDao().toMimeTypeVO(contentType));
		}
		if (modifiedUser != null) {
			target.setModifiedUser(this.getUserDao().toUserOutVO(modifiedUser));
		}
		target.setDatas(source.getData());
	}

	/**
	 * {@inheritDoc}
	 */
	public JobFileVO toJobFileVO(final Job entity) {
		return super.toJobFileVO(entity);
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private Job loadJobFromJobFileVO(JobFileVO jobFileVO) {
		// TODO implement loadJobFromJobFileVO
		//throw new UnsupportedOperationException("org.phoenixctms.ctsms.domain.loadJobFromJobFileVO(JobFileVO) not yet implemented.");
		Job job = this.get(jobFileVO.getId());
		if (job == null) {
			job = Job.Factory.newInstance();
		}
		return job;
	}

	/**
	 * {@inheritDoc}
	 */
	public Job jobFileVOToEntity(JobFileVO jobFileVO) {
		Job entity = this.loadJobFromJobFileVO(jobFileVO);
		this.jobFileVOToEntity(jobFileVO, entity, true);
		return entity;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void jobFileVOToEntity(
			JobFileVO source,
			Job target,
			boolean copyIfNull) {
		super.jobFileVOToEntity(source, target, copyIfNull);
		MimeTypeVO contentTypeVO = source.getContentType();
		UserOutVO modifiedUserVO = source.getModifiedUser();
		if (contentTypeVO != null) {
			target.setContentType(this.getMimeTypeDao().mimeTypeVOToEntity(contentTypeVO));
		} else if (copyIfNull) {
			target.setContentType(null);
		}
		if (modifiedUserVO != null) {
			target.setModifiedUser(this.getUserDao().userOutVOToEntity(modifiedUserVO));
		} else if (copyIfNull) {
			target.setModifiedUser(null);
		}
		if (copyIfNull || source.getDatas() != null) {
			target.setData(source.getDatas());
		}
	}

	/**
	 * {@inheritDoc}
	 */
	public void toJobInVO(
			Job source,
			JobInVO target) {
		super.toJobInVO(source, target);
		MimeType contentType = source.getContentType();
		JobType type = source.getType();
		Trial trial = source.getTrial();
		Proband proband = source.getProband();
		Criteria criteria = source.getCriteria();
		InputField inputField = source.getInputField();
		if (type != null) {
			target.setTypeId(type.getId());
		}
		if (trial != null) {
			target.setTrialId(trial.getId());
		}
		if (proband != null) {
			target.setProbandId(proband.getId());
		}
		if (criteria != null) {
			target.setCriteriaId(criteria.getId());
		}
		if (inputField != null) {
			target.setInputFieldId(inputField.getId());
		}
		target.setDatas(source.getData());
		if (contentType != null) {
			target.setMimeType(contentType.getMimeType());
		}
	}

	/**
	 * {@inheritDoc}
	 */
	public JobInVO toJobInVO(final Job entity) {
		return super.toJobInVO(entity);
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private Job loadJobFromJobInVO(JobInVO jobInVO) {
		// TODO implement loadJobFromJobInVO
		// throw new UnsupportedOperationException("org.phoenixctms.ctsms.domain.loadJobFromJobInVO(JobInVO) not yet implemented.");
		Job job = null;
		Long id = jobInVO.getId();
		if (id != null) {
			job = this.load(id);
		}
		if (job == null) {
			job = Job.Factory.newInstance();
		}
		return job;
	}

	/**
	 * {@inheritDoc}
	 */
	public Job jobInVOToEntity(JobInVO jobInVO) {
		Job entity = this.loadJobFromJobInVO(jobInVO);
		this.jobInVOToEntity(jobInVO, entity, true);
		return entity;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void jobInVOToEntity(
			JobInVO source,
			Job target,
			boolean copyIfNull) {
		super.jobInVOToEntity(source, target, copyIfNull);
		Long typeId = source.getTypeId();
		Long trialId = source.getTrialId();
		Long probandId = source.getProbandId();
		Long inputFieldId = source.getInputFieldId();
		Long criteriaId = source.getCriteriaId();
		if (typeId != null) {
			target.setType(this.getJobTypeDao().load(typeId));
		} else if (copyIfNull) {
			target.setType(null);
		}
		if (trialId != null) {
			Trial trial = this.getTrialDao().load(trialId);
			target.setTrial(trial);
			trial.addJobs(target);
		} else if (copyIfNull) {
			Trial trial = target.getTrial();
			target.setTrial(null);
			if (trial != null) {
				trial.removeJobs(target);
			}
		}
		if (probandId != null) {
			Proband proband = this.getProbandDao().load(probandId);
			target.setProband(proband);
			proband.addJobs(target);
		} else if (copyIfNull) {
			Proband proband = target.getProband();
			target.setProband(null);
			if (proband != null) {
				proband.removeJobs(target);
			}
		}
		if (inputFieldId != null) {
			InputField inputField = this.getInputFieldDao().load(inputFieldId);
			target.setInputField(inputField);
			inputField.addJobs(target);
		} else if (copyIfNull) {
			InputField inputField = target.getInputField();
			target.setInputField(null);
			if (inputField != null) {
				inputField.removeJobs(target);
			}
		}
		if (criteriaId != null) {
			Criteria criteria = this.getCriteriaDao().load(criteriaId);
			target.setCriteria(criteria);
			criteria.addJobs(target);
		} else if (copyIfNull) {
			Criteria criteria = target.getCriteria();
			target.setCriteria(null);
			if (criteria != null) {
				criteria.removeJobs(target);
			}
		}
		if (source.getDatas() != null && source.getDatas().length > 0) {
			target.setData(source.getDatas());
			target.setFileSize((long) source.getDatas().length);
			target.setContentType(this.getMimeTypeDao().findByMimeTypeModule(source.getMimeType(), FileModule.JOB_FILE).iterator().next());
		} else if (copyIfNull) {
			target.setData(null);
			target.setFileSize(0l);
			target.setContentType(null);
		}
	}

	/**
	 * {@inheritDoc}
	 */
	public void toJobOutVO(
			Job source,
			JobOutVO target) {
		super.toJobOutVO(source, target);
		// WARNING! No conversion for target.modifiedUser (can't convert source.getModifiedUser():org.phoenixctms.ctsms.domain.User to org.phoenixctms.ctsms.vo.UserOutVO
		// WARNING! No conversion for target.type (can't convert source.getType():org.phoenixctms.ctsms.domain.JobType to org.phoenixctms.ctsms.vo.JobTypeVO
		// WARNING! No conversion for target.trial (can't convert source.getTrial():org.phoenixctms.ctsms.domain.Trial to org.phoenixctms.ctsms.vo.TrialOutVO
		// WARNING! No conversion for target.proband (can't convert source.getProband():org.phoenixctms.ctsms.domain.Proband to org.phoenixctms.ctsms.vo.ProbandOutVO
		// WARNING! No conversion for target.criteria (can't convert source.getCriteria():org.phoenixctms.ctsms.domain.Criteria to org.phoenixctms.ctsms.vo.CriteriaOutVO
		// WARNING! No conversion for target.inputField (can't convert source.getInputField():org.phoenixctms.ctsms.domain.InputField to org.phoenixctms.ctsms.vo.InputFieldOutVO
		User modifiedUser = source.getModifiedUser();
		JobType type = source.getType();
		Trial trial = source.getTrial();
		Proband proband = source.getProband();
		Criteria criteria = source.getCriteria();
		InputField inputField = source.getInputField();
		if (modifiedUser != null) {
			target.setModifiedUser(this.getUserDao().toUserOutVO(modifiedUser));
		}
		if (type != null) {
			target.setType(this.getJobTypeDao().toJobTypeVO(type));
		}
		if (trial != null) {
			target.setTrial(this.getTrialDao().toTrialOutVO(trial));
		}
		if (proband != null) {
			target.setProband(this.getProbandDao().toProbandOutVO(proband));
		}
		if (criteria != null) {
			target.setCriteria(this.getCriteriaDao().toCriteriaOutVO(criteria));
		}
		if (inputField != null) {
			target.setInputField(this.getInputFieldDao().toInputFieldOutVO(inputField));
		}
		target.setHasFile(source.getFileSize() != null && source.getFileSize() > 0l);
	}

	/**
	 * {@inheritDoc}
	 */
	public JobOutVO toJobOutVO(final Job entity) {
		return super.toJobOutVO(entity);
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private Job loadJobFromJobOutVO(JobOutVO jobOutVO) {
		// TODO implement loadJobFromJobOutVO
		//throw new UnsupportedOperationException("org.phoenixctms.ctsms.domain.loadJobFromJobOutVO(JobOutVO) not yet implemented.");
		Job job = this.get(jobOutVO.getId());
		if (job == null) {
			job = Job.Factory.newInstance();
		}
		return job;
	}

	/**
	 * {@inheritDoc}
	 */
	public Job jobOutVOToEntity(JobOutVO jobOutVO) {
		Job entity = this.loadJobFromJobOutVO(jobOutVO);
		this.jobOutVOToEntity(jobOutVO, entity, true);
		return entity;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void jobOutVOToEntity(
			JobOutVO source,
			Job target,
			boolean copyIfNull) {
		super.jobOutVOToEntity(source, target, copyIfNull);
		JobTypeVO typeVO = source.getType();
		TrialOutVO trialVO = source.getTrial();
		ProbandOutVO probandVO = source.getProband();
		CriteriaOutVO criteriaVO = source.getCriteria();
		InputFieldOutVO inputFieldVO = source.getInputField();
		UserOutVO modifiedUserVO = source.getModifiedUser();
		if (typeVO != null) {
			target.setType(this.getJobTypeDao().jobTypeVOToEntity(typeVO));
		} else if (copyIfNull) {
			target.setType(null);
		}
		if (trialVO != null) {
			Trial trial = this.getTrialDao().trialOutVOToEntity(trialVO);
			target.setTrial(trial);
			trial.addJobs(target);
		} else if (copyIfNull) {
			Trial trial = target.getTrial();
			target.setTrial(null);
			if (trial != null) {
				trial.removeJobs(target);
			}
		}
		if (probandVO != null) {
			Proband proband = this.getProbandDao().probandOutVOToEntity(probandVO);
			target.setProband(proband);
			proband.addJobs(target);
		} else if (copyIfNull) {
			Proband proband = target.getProband();
			target.setProband(null);
			if (proband != null) {
				proband.removeJobs(target);
			}
		}
		if (criteriaVO != null) {
			Criteria criteria = this.getCriteriaDao().criteriaOutVOToEntity(criteriaVO);
			target.setCriteria(criteria);
			criteria.addJobs(target);
		} else if (copyIfNull) {
			Criteria criteria = target.getCriteria();
			target.setCriteria(null);
			if (criteria != null) {
				criteria.removeJobs(target);
			}
		}
		if (inputFieldVO != null) {
			InputField inputField = this.getInputFieldDao().inputFieldOutVOToEntity(inputFieldVO);
			target.setInputField(inputField);
			inputField.addJobs(target);
		} else if (copyIfNull) {
			InputField inputField = target.getInputField();
			target.setInputField(null);
			if (inputField != null) {
				inputField.removeJobs(target);
			}
		}
		if (modifiedUserVO != null) {
			target.setModifiedUser(this.getUserDao().userOutVOToEntity(modifiedUserVO));
		} else if (copyIfNull) {
			target.setModifiedUser(null);
		}
	}
}